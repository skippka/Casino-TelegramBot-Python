import telebot
import random
import time
from game_file import get_user_data, update_user_data

bot = telebot.TeleBot('6416697474:AAH2y6UeM0Rpdg8YiwS6FB0yv2uHh12Z73I')


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, '''
–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç ‚Äî –í–æ–≤–∞–Ω—á–∏–∫ –∫–∞–∑–∏–Ω–æ üé∞

–°–æ –º–Ω–æ–π —Ç—ã —Ç–æ—á–Ω–æ –Ω–µ –∑–∞—Å–∫—É—á–∞–µ—à—å! –¢—ã –º–æ–∂–µ—à—å –∫–∞–∫ –∏–≥—Ä–∞—Ç—å –æ–¥–∏–Ω, —Ç–∞–∫ –∏ –∏–≥—Ä–∞—Ç—å —Å –¥—Ä—É–∑—å—è–º–∏. üî•
–ê –≤–æ—Ç —Ç—É—Ç –≤—Å–µ –∏–≥—Ä—ã ‚Äî /game 
¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑
–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? ‚Äî –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞ üëâ /help 
    ''')

@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, '''
–ü—Ä–∏–≤–µ—Ç! 
–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è:

/game - –í—Å–µ –∏–≥—Ä—ã
/balance - –ë–∞–ª–∞–Ω—Å 
/bonus - –ë–æ–Ω—É—Å
–°–∫–æ—Ä–æ: /give - –ü–µ—Ä–µ–¥–∞—Ç—å –∫–æ–∏–Ω—ã
    ''')

@bot.message_handler(commands=['bonus', '–±–æ–Ω—É—Å'])
def bonus(message):
    user_id = message.chat.id
    user_data = get_user_data(user_id)
    bonus_amount = random.randint(1, 500)
    user_data['balance'] += bonus_amount
    update_user_data(user_id, user_data)
    bot.send_message(message.chat.id, f'–¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å: {bonus_amount} Coin')

@bot.message_handler(commands=['game', '–∏–≥—Ä—ã'])
def game(message):
    bot.send_message(message.chat.id, '''
–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å –≤ —Ä–∞–∑–Ω—ã–µ –∏–≥—Ä—ã!
¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑
–ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É üëá

üé∞ /casino [—Å—Ç–∞–≤–∫–∞]
/crash [—Å—Ç–∞–≤–∫–∞]
–ü—Ä–∏–º–µ—Ä: /casino 100
–ü—Ä–∏–º–µ—Ä: /crash 100
    ''')

@bot.message_handler(commands=['balance', 'balanse'])
def balance(message):
    user_id = message.chat.id
    user_data = get_user_data(user_id)
    bot.send_message(message.chat.id, f'''
–ë–∞–ª–∞–Ω—Å: {user_data['balance']} Coin
¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑
–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: {user_data['gameplay']}
    ''')

@bot.message_handler(commands=['casino'])
def casino(message):
    user_id = message.chat.id
    user_data = get_user_data(user_id)
    try:
        args = message.text.split()
        if len(args) != 2 or not args[1].isdigit():
            bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–≤–∫—É –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞. –ü—Ä–∏–º–µ—Ä: /casino 100")
            return

        stake = int(args[1])
        if stake > user_data['balance']:
            bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")
            return
        if stake <= 0:
            bot.send_message(message.chat.id, "–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return

        multiplier = round(random.uniform(0, 2), 1)
        win = int(stake * multiplier)
        user_data['balance'] += win - stake
        user_data['gameplay'] += 1

        bot.send_message(message.chat.id, f'''
–¢–µ–±–µ –≤—ã–ø–∞–ª–æ: {multiplier} üé≤
–í—ã–∏–≥—Ä—ã—à: {win} Coin
–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_data['balance']} Coin
        ''')

        update_user_data(user_id, user_data)

    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['crash'])
def crash(message):
    user_id = message.chat.id
    user_data = get_user_data(user_id)
    try:
        args = message.text.split()
        if len(args) != 2 or not args[1].isdigit():
            bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–≤–∫—É –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞. –ü—Ä–∏–º–µ—Ä: /crash 100")
            return

        stake = int(args[1])
        if stake > user_data['balance']:
            bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")
            return
        if stake <= 0:
            bot.send_message(message.chat.id, "–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return

        crash_point = round(random.uniform(1.1, 10), 1)
        user_choice = round(random.uniform(1.1, crash_point), 1)
        user_data['gameplay'] += 1

        if user_choice >= crash_point:
            bot.send_message(message.chat.id, f"–¢–≤–æ–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–µ –¥–æ—à–µ–ª –¥–æ {crash_point}! –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!")
            user_data['balance'] -= stake
        else:
            win = int(stake * user_choice)
            user_data['balance'] += win - stake
            bot.send_message(message.chat.id, f"–¢—ã –≤—ã—à–µ–ª —Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º {user_choice} –∏ –≤—ã–∏–≥—Ä–∞–ª {win} Coin!")

        bot.send_message(message.chat.id, f"–¢–≤–æ–π –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_data['balance']} Coin")
        update_user_data(user_id, user_data)

    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(func=lambda message: '–≥–æ—à–∞' in message.text.lower())
def handle_gosha(message):
    bot.send_message(message.chat.id, "–¢—ã –ø—Ä–æ—Å—Ç–æ –∫–ª–∞—Å—Å–Ω—ã–π —á—É–≤–∞–∫!")

def poll_bot():
    while True:
        try:
            bot.polling(non_stop=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            time.sleep(5)

if __name__ == '__main__':
    poll_bot()
